package ru.iammaxim.ModuleTalker;

import org.json.JSONObject;
import ru.iammaxim.ModuleBase.ModuleBase;
import ru.iammaxim.VkBot.Groups.Messages;
import ru.iammaxim.VkBot.Objects.ObjectMessage;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Created by maxim on 22.08.2016.
 */
public class ModuleTalker extends ModuleBase {
    public Node<String> tree = new Node<>();
    public ConcurrentHashMap<String, Node<String>> data = new ConcurrentHashMap<>();

    public ModuleTalker() {
        try {
            loadFromMessages("messages_in.txt");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public void loadFromMessages(String filename) throws FileNotFoundException {
        File file = new File(filename);
        if (!file.exists()) return;
        Scanner scanner = new Scanner(file);

        //prepass; load messages into #data
        while (scanner.hasNext()) {
            String s = scanner.nextLine();
            JSONObject o = new JSONObject(s);
            int out = o.getInt("out");
            if (out == 1) continue;
            String body = o.getString("body");
            String[] strings = body.split(" ");
            for (int i = 1; i < strings.length; i++) {
                String prev = strings[i-1];
                String cur = strings[i];
                //System.out.println("processing " + prev + " " + cur);
                Node<String> node = data.get(prev);
                if (node == null) {
                    //System.out.println("key \"" + prev + "\" not found, putting it");
                    data.put(prev, node = new Node<>(prev));
                }
                Node node1 = new Node<>(node, cur);
                //System.out.println("putting \"" + cur + "\"");
                data.put(cur, node1);
                //System.out.println("adding child " + node1.value);
                node.add(node1);
            }
        }
        //log(tree, 0);

        data.forEach((s, node) -> {
            /*node.children.forEach(node1 -> {
                if (data == null) System.out.println("data == null");
                if (node1 == null) System.out.println("node1 == null");
                else {
                    Node<String> v = data.get(node1.value);
                    if (v != null) {
                        System.out.println("size was: " + node.children.size());
                        System.out.println(node.children.get(0).value);
                        System.out.println("adding node " + node1.value);
                        node.add(node1);
                        System.out.println("now size is: " + node.children.size());
                    }
                }
            });*/
            tree.add(node);
        });

        //log(tree, 1);
    }

    private void log(Node<String> tree, int index) {
        System.out.println("started logging with index " + index);
        try (FileOutputStream fos = new FileOutputStream(new File("tree_out.txt."+index))) {
            tree.log(fos, "");
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("logging completed.");
    }

    @Override
    public void process(ObjectMessage inputMessage) {
        /*if (inputMessage.from_id == 261148366) {
            Messages.send(inputMessage.from_id, "ZABANENO. Ты кто?");
            return;
        }*/
        if (inputMessage.body.equals("/gen")) {
            Messages.send(inputMessage.from_id, tree.getSentence());
        }
    }

    @Override
    public String getName() {
        return "talker";
    }
}
